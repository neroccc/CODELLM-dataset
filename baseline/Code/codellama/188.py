from typing import List
class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        n = len(prices)
        if k >= n // 2:
            return self.maxProfitUnlimited(prices)
        
        dp = [[0] * n for _ in range(k + 1)]
        for i in range(1, k + 1):
            max_single_profit = float("-inf")
            for j in range(1, n):
                max_single_profit = max(max_single_profit, dp[i - 1][j - 1] - prices[j - 1])
                dp[i][j] = max(dp[i][j - 1], prices[j] + max_single_profit)
        
        return dp[k][n - 1]
    
    def maxProfitUnlimited(self, prices: List[int]) -> int:
        max_profit = 0
        min_price = float("inf")
        for price in prices:
            min_price = min(min_price, price)
            max_profit = max(max_profit, price - min_price)
        return max_profit














































































































































































































